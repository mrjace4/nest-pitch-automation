from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
import json
import os
from typing import Dict, List
from datetime import datetime

class GoogleDocsFormatter:
    def __init__(self, service_account_file: str = None):
        """Initialize with service account credentials"""
        
        # Check if running on Railway (environment variable exists)
        if os.getenv('GOOGLE_SERVICE_ACCOUNT_JSON'):
            # Load from environment variable
            import json
            service_account_info = json.loads(os.getenv('GOOGLE_SERVICE_ACCOUNT_JSON'))
            self.credentials = Credentials.from_service_account_info(
                service_account_info,
                scopes=['https://www.googleapis.com/auth/documents',
                       'https://www.googleapis.com/auth/drive']
            )
        else:
            # Load from file (local development)
            self.credentials = Credentials.from_service_account_file(
                service_account_file,
                scopes=['https://www.googleapis.com/auth/documents',
                       'https://www.googleapis.com/auth/drive']
            )
        
        self.docs_service = build('docs', 'v1', credentials=self.credentials)
        self.drive_service = build('drive', 'v3', credentials=self.credentials)
    
    def create_pitch_plan_document(self, pitch_plan_data: Dict, team_emails: List[str] = None) -> str:
        """Create professionally formatted Google Doc from pitch plan data"""
        
        client_name = pitch_plan_data.get('client_name', 'Unknown Client')
        generated_at = pitch_plan_data.get('generated_at', datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
        
        # Create new document
        doc_title = f"Pitch Plan - {client_name} - {generated_at.split()[0]}"
        
        try:
            # Create document
            document = self.docs_service.documents().create(body={
                'title': doc_title
            }).execute()
            
            document_id = document['documentId']
            print(f"✅ Created document: {doc_title}")
            
            # Add content to document
            self.add_content_to_document(document_id, pitch_plan_data)
            
            # Share with team if emails provided
            if team_emails:
                self.share_with_team(document_id, team_emails)
            
            # Return document URL
            doc_url = f"https://docs.google.com/document/d/{document_id}/edit"
            print(f"📄 Document URL: {doc_url}")
            
            return doc_url
            
        except HttpError as error:
            print(f"❌ Error creating document: {error}")
            return None
    
    def add_content_to_document(self, document_id: str, pitch_plan_data: Dict):
        """Add formatted content to the document"""
        
        client_name = pitch_plan_data.get('client_name', 'Client')
        final_plan = pitch_plan_data.get('final_plan', '')
        narrative = pitch_plan_data.get('narrative', '')
        generated_at = pitch_plan_data.get('generated_at', 'Unknown')
        
        # Prepare content
        content = f"""PITCH PLAN
{client_name.upper()}

Generated: {generated_at}
Confidential - Nest Performance Team Only

═════════════════════════════════════════════════════

EXECUTIVE NARRATIVE

{narrative}

═════════════════════════════════════════════════════

{final_plan}

═════════════════════════════════════════════════════

Generated by Nest Performance Pitch Automation System
This document is confidential and proprietary to Nest Performance.
"""
        
        try:
            # Insert content
            requests = [
                {
                    'insertText': {
                        'location': {'index': 1},
                        'text': content
                    }
                }
            ]
            
            self.docs_service.documents().batchUpdate(
                documentId=document_id,
                body={'requests': requests}
            ).execute()
            
            print("✅ Document content added")
            
        except HttpError as error:
            print(f"❌ Error adding content: {error}")
    
    def share_with_team(self, document_id: str, team_emails: List[str]):
        """Share document with team members"""
        
        try:
            for email in team_emails:
                self.drive_service.permissions().create(
                    fileId=document_id,
                    body={
                        'type': 'user',
                        'role': 'writer',
                        'emailAddress': email
                    },
                    sendNotificationEmail=True
                ).execute()
                
                print(f"✅ Shared with {email}")
                
        except HttpError as error:
            print(f"❌ Error sharing document: {error}")
